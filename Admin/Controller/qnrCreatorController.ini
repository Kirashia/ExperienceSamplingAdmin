<?php

include("../../controller.php");
include("../Database/qnrCreatorDatabase.ini");

class qnrCreatorController extends controller {
	
	//public
	public $qnrTable;
	public $qnrNames;
	public $validation;
	public $url;
	
	//private
	protected $qnrDb;
	protected $qnrs;
	
	public function __construct()
	{
		$this -> qnrDb = new qnrCreatorDatabase();
		
		$this -> qnrs = $this -> qnrDb -> getQnrs();
		$this -> validation = true;
		$this -> url = $this -> getURL();
		
		// Get all qnrs into a table
		$this -> qnrTable = $this->printQnrs();
		$this -> qnrNames = $this -> getQnrNames();
		
	}
	
	/* 
	NAME: 
	makeQnr
	
	FUNCTION: 
	makes a new blank questionnaire with a given name
	
	PARAMETERS:
	title - the name of the questionnaire to be made
	
	RETURNS:
	true if the task succeeds, false if it fails at any point
	*/	
	
	public function makeQnr($title)
	{
		$success = false;
		// Will not create a questionnaire without a name
		if ($title != ""){
				$success = $this -> qnrDb -> makeNewQuestionnaire($title);
				if (!$success){
					return false;
				}
		}
			
		return $success;
	}
	
	public function getQnrName($id)
	{
		return $this -> qnrDb -> getQnrID($id);
	}
	
	public function getQnrID($qnrName)
	{
		$t = $this -> qnrDb -> getQnrID($qnrName);
		
		//if(!$t)
			//echo "Questionnaire doesn't exist: ".$qnrName."<br>";
		
		return $t;
	}
	
	/* 
	NAME: 
	copyQnr
	
	FUNCTION: 
	copies all the data associated with a questionnaire referenced by name, including all the questions
	
	PARAMETERS:
	originalName - the name of the questionnaire to be copied
	newName - the name for the new questionnaire to become - default, this is 
	
	RETURNS:
	true if the task succeeds, false if it fails at any point
	*/	
	
	public function copyQnr($originalName, $newName)
	{		
		$o = $originalName;
		$n = $newName;
		
		$oID = $this -> getQnrID($o);
		$nID = $this -> getQnrID($n);
		
		////var_dump($oID);
		
		$qDataO = $this -> qnrDb -> getFilterQs($oID);	

		////var_dump($qDataO);
		//echo '<br>';
		/* $this -> data($qDataO); */
				
		foreach($qDataO as $qO)
		{
			$success = $this -> qnrDb -> makeNewQuestion($qO["title"], $qO["type"], $nID);
			if (!$success)
			{
				/* $this -> data($success); */
				continue;
			}
			
			if ($qO["type"] != "checkbox" and $qO["type"] != "radio")
			{
				/* $this -> data("Not mc"); */
				continue;
			}
			
			
			$ofk = $qO["id"];
			$nfk = $this -> qnrDb -> getLastRow()[0]["id"];
			$rDataO = $this -> qnrDb -> getAllMCAnswers($ofk);
			
			/* $this -> data($ofk);
			$this -> data($nfk);
			$this -> data($rDataO); */
			
			foreach($rDataO as $r)
			{
				$success = $this -> qnrDb -> makeNewMCAnswer($r["text"], $r["type"], $nfk);
				if(!$success)
				{
					/* $this -> data($success); */
					continue;
				}
			}
		}
		
		return true;
	}
	
	/* 
	NAME: 
	deleteQnr
	
	FUNCTION: 
	deletes all the data associated with a questionnaire referenced by name
	
	PARAMETERS:
	qnrName - the name of the questionnaire
	
	RETURNS:
	false if the questionnaire doesn't exist, else void 
	*/	
	
	public function deleteQnr($qnrName)
	{
		$qnrID = $this -> getQnrID($qnrName);
		if(!$qnrID)
			return false;
		
		$qnrSuccess = $this -> qnrDb -> deleteQnr($qnrID);
		$qnrUserSuccess = $this -> qnrDb -> unassignQnrFromUser($qnrID);
		$qSuccess = $this -> qnrDb -> deleteBatchQ($qnrID);
	}
	
	function data($d, $e = "")
	{
		echo '<br> ----'.$e.': ';
		//var_dump($d);
		echo '----<br>';
	}
	
	public function printQnrs()
	{	
		
		$qnrsTable = "";
		
		$qnrsTable .= '<table>';				
	
		//headers		
		$qnrsTable .= '<tr>';		
		
		foreach($this->qnrs[0] as $key => $value){			
			$qnrsTable .= "<th>" . $key . "</th>";		
		}		
		$qnrsTable .= '</tr>';				
		
		foreach($this->qnrs as $selected_row){			
			$qnrsTable .= '<tr>'; 
			//init table row			
			for ($n = 0; $n < count($selected_row); $n++){				
				$qnrsTable .= "<td>".array_values($selected_row)[$n]."</td>"; 
				//echo row with header or data appropriatly			
			}			
			$qnrsTable .= '</tr>'; 
			//end table row		
		}				
		$qnrsTable .= '</table>';	

		return $qnrsTable;
	}
	
	public function getQnrNames()
	{
		$this -> qnrs = $this -> qnrDb -> getQnrs();
		$result = [];
		foreach($this->qnrs as $selected_row){
			//init table row			
			array_push($result,$selected_row["title"]);
		}
		return $result;
	}
	
	public function getUpdatedNames()
	{
		$t = $this -> qnrDb -> getQnrs();
		$result = [];
		foreach($t as $selected_row){
			//init table row			
			array_push($result,$selected_row["title"]);
		}
		return $result;
	}
	
	public function editQnrName($oldName, $newName)
	{
		return $this -> qnrDb -> editQnrName($oldName, $newName);
	}
	
	public function __destruct()
    {
		unset($this->qnrDb);
    }
	
}
?>